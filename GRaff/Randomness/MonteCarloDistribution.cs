using System;
namespace GRaff.Randomness
{
    /// <summary>
    /// Generator for a distribution that is sampled from using a Monte Carlo algorithm.
    /// </summary>
    /// <typeparam name="T">The type of elements that are generated by this distribution.</typeparam>
    public class MonteCarloDistribution<T> : IDistribution<T>
    {
        private readonly IDistribution<T> _sampler;
        private readonly Func<T, bool> _accepter;
        private readonly int _maxLoops;

        public MonteCarloDistribution(IDistribution<T> sampler, Func<T, bool> accepter, int maxLoops = 100)
        {
            this._sampler = sampler;
            this._accepter = accepter;
            this._maxLoops = maxLoops;
        }

        public T Generate()
        {
            for (int i = 0; i < _maxLoops; i++)
            {
                var sample = _sampler.Generate();
                if (_accepter(sample))
                    return sample;
            }

            throw new TimeoutException("The Monte Carlo sampler failed to pick a value within the prescribed number of iterations.");
        }

        public bool HitMiss() => _accepter(_sampler.Generate());
    }
}
