using System;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GRaff.Randomness
{
    /// <summary>
    /// Generator for a distribution with a finite number of possible values.
    /// </summary>
    /// <typeparam name="T">The type of elements that are generated by this distribution.</typeparam>
	public sealed class FiniteDistribution<T> : IDistribution<T>
	{
		private readonly Random _rnd;
		private readonly T[] _elements;
        private readonly double[] _weights;
        private readonly double _totalWeight;

		public FiniteDistribution(IEnumerable<T> elements)
			: this(GRandom.Source, elements)
		{
			Contract.Requires<ArgumentNullException>(elements != null);
			Contract.Requires<ArgumentException>(elements.Any());
		}
        
		public FiniteDistribution(Random rnd, IEnumerable<T> elements)
		{
			Contract.Requires<ArgumentNullException>(rnd != null);
			Contract.Requires<ArgumentNullException>(elements != null);
			Contract.Requires<ArgumentException>(elements.Any());
			_rnd = rnd;
			_elements = elements.ToArray();
            _weights = null;
		}

        public FiniteDistribution(Random rnd, IEnumerable<(T t, double weight)> elements)
        {
            Contract.Requires<ArgumentNullException>(elements != null);
            Contract.Requires<ArgumentException>(elements.Any());
            Contract.Requires<ArgumentException>(elements.All(tw => tw.weight >= 0));
            _rnd = rnd;
            _elements = elements.Select(tw => tw.t).ToArray();
            _weights = elements.Select(tw => tw.weight).ToArray();
            _totalWeight = _weights.Sum();
        }


        public T Generate()
		{
            if (_weights == null)
			    return _rnd.Choose(_elements);
            else
            {
                double currentWeight = _rnd.Double(_totalWeight);
                for (int i = 0; i < _elements.Length; i++)
                {
                    currentWeight -= _weights[i];
                    if (currentWeight <= 0)
                        return _elements[i];
                }
                return _elements.Last();
            }
		}
	}
}
