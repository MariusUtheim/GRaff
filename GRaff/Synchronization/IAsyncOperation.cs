using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GRaff.Synchronization
{
	/// <summary>
	/// Represents an asynchronous operation that will not return a value.
	/// </summary>
	public interface IAsyncOperation
	{
		// Gets the state of this IAsyncOperation
		AsyncOperationState State { get; }

		// Aborts the IAsyncOperation
		void Abort();

		// Marks this IAsyncOperation as Done
		void Done();

		// Gets whether this IAsyncOperation is Done
		bool IsDone { get; }

		// Blocks until the IAsyncOperation completes
		void Wait();

		// When this IAsyncOperation completes, dispatch the IAsyncOperation generated by the specified function.
		IAsyncOperation Then(Func<IAsyncOperation> action);

		// When this IAsyncOperation completes, dispatch the IAsyncOperation<TNext> generated by the specified function.
		IAsyncOperation<TNext> Then<TNext>(Func<IAsyncOperation<TNext>> action);

		// When this IAsyncOperation completes, execute the specified action immediately.
		IAsyncOperation ThenWait(Action action);

		// When this IAsyncOperation completes, execute the specified function immediately.
		IAsyncOperation<TNext> ThenWait<TNext>(Func<TNext> action);

		// When this IAsyncOperation completes, dispatch the specified action in the next Async step.
		IAsyncOperation ThenSync(Action action);

		// When this IAsyncOperation completes, dispatch the specified function in the next Async step.
		IAsyncOperation<TNext> ThenSync<TNext>(Func<TNext> action);

		// When this IAsyncOperation completes, dispatch the Task generated by the specified function asynchronously (possibly on a different thread).
		IAsyncOperation ThenAsync(Func<Task> action);

		// When this IAsyncOperation completes, dispatch the Task<TNext> generated by the specified function asynchronously (possibly on a different thread).
		IAsyncOperation<TNext> ThenAsync<TNext>(Func<Task<TNext>> action);

		// If a TException would be thrown during dispatching this IAsyncOperation, handle that operation and instead return a success.
		IAsyncOperation Catch<TException>(Action<TException> handler) where TException : Exception;

		// Returns an operation that will resolve if this IAsyncOperation fails with an Exception of the specified type.
		// That operation will resolve after the other continuations have been rejected.
		IAsyncOperation<Exception> Otherwise();

		void Dispatch(object value);
	}
	
	/// <summary>
 /// Represents an asynchronous operation that will return the specified type.
 /// </summary>
	public interface IAsyncOperation<TPass> : IAsyncOperation
	{
		IAsyncOperation Then(Func<TPass, IAsyncOperation> action);
		IAsyncOperation<TNext> Then<TNext>(Func<TPass, IAsyncOperation<TNext>> action);
		IAsyncOperation ThenWait(Action<TPass> action);
		IAsyncOperation<TNext> ThenWait<TNext>(Func<TPass, TNext> action);
		IAsyncOperation ThenSync(Action<TPass> action);
		IAsyncOperation<TNext> ThenSync<TNext>(Func<TPass, TNext> action);
		IAsyncOperation ThenAsync(Func<TPass, Task> action);
		IAsyncOperation<TNext> ThenAsync<TNext>(Func<TPass, Task<TNext>> action);
		IAsyncOperation<TPass> Catch<TException>(Func<TException, TPass> handler) where TException : Exception;
		new TPass Wait();
	}
}
